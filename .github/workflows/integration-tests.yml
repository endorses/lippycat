name: Integration Tests

on:
  workflow_dispatch:  # Manual trigger only - run when you're ready

env:
  GO_VERSION: "1.24"
  LIPPYCAT_LOG_LEVEL: "info"

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpcap-dev

      - name: Run unit tests
        run: |
          go test -v -race -tags=all -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.txt
          flags: unittests
          name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpcap-dev

      - name: Generate test certificates
        run: |
          cd test/testcerts
          ./generate_test_certs.sh
          ls -la

      - name: Run integration tests
        run: |
          cd test
          go test -v -run TestIntegration -timeout 20m

      - name: Upload integration test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-logs
          path: |
            test/*.log
            test/*.pcap
          retention-days: 7

  docker-integration-tests:
    name: Docker Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate test certificates
        run: |
          cd test/testcerts
          ./generate_test_certs.sh

      - name: Build Docker images
        run: |
          cd test
          docker compose build

      - name: Start services
        run: |
          cd test
          docker compose up -d processor hunter1 hunter2

      - name: Wait for services to be healthy
        run: |
          cd test
          timeout 60 bash -c 'until docker compose ps processor | grep -q "healthy"; do sleep 2; done'
          echo "Processor is healthy"

      - name: Check service logs
        run: |
          cd test
          docker compose logs processor
          docker compose logs hunter1

      - name: Run Docker-based tests
        run: |
          cd test
          docker compose exec -T processor lc debug stats || true
          docker compose exec -T hunter1 lc debug stats || true

      - name: Test TLS connectivity
        run: |
          cd test
          docker compose exec -T client openssl s_client -connect processor.test.local:50051 \
            -cert /certs/client-cert.pem \
            -key /certs/client-key.pem \
            -CAfile /certs/ca-cert.pem \
            </dev/null || true

      - name: Collect service logs
        if: always()
        run: |
          cd test
          docker compose logs > docker-integration-logs.txt

      - name: Upload Docker logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-integration-logs
          path: test/docker-integration-logs.txt
          retention-days: 7

      - name: Stop services
        if: always()
        run: |
          cd test
          docker compose down -v

  # Temporarily disabled - enable when other tests are passing
  # benchmark-tests:
  #   name: Performance Benchmarks
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 30

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: ${{ env.GO_VERSION }}
  #         cache: true

  #     - name: Install dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y libpcap-dev

  #     - name: Run benchmarks
  #       run: |
  #         cd test
  #         go test -run='^$' -bench=. -benchmem -benchtime=5s -timeout=20m | tee benchmark-results.txt

  #     - name: Upload benchmark results
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: benchmark-results
  #         path: test/benchmark-results.txt
  #         retention-days: 30

  #     - name: Compare benchmarks (on PR)
  #       if: github.event_name == 'pull_request'
  #       uses: benchmark-action/github-action-benchmark@v1
  #       with:
  #         tool: 'go'
  #         output-file-path: test/benchmark-results.txt
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         auto-push: false
  #         comment-on-alert: true
  #         alert-threshold: '150%'  # Alert if performance degrades by 50%

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpcap-dev

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-fmt sarif -out gosec-results.sarif -no-fail -tags=all ./...'

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true  # Don't fail build if SARIF format is invalid
        with:
          sarif_file: gosec-results.sarif

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck -tags=all ./...

  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpcap-dev

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: v2
          args: --timeout=5m --build-tags=all

      - name: Check go fmt
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files need formatting:"
            gofmt -s -l .
            exit 1
          fi

      - name: Check go vet
        run: go vet -tags=all ./...

  build-test:
    name: Build All Variants
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        variant: [all, hunter, processor, cli, tui]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpcap-dev

      - name: Build ${{ matrix.variant }} variant
        run: make ${{ matrix.variant }}

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: lippycat-${{ matrix.variant }}-${{ github.sha }}
          path: bin/*
          retention-days: 7

  test-results:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, docker-integration-tests, security-scan, lint, build-test]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Status" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Integration Tests: ${{ needs.docker-integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Lint: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build Test: ${{ needs.build-test.result }}" >> $GITHUB_STEP_SUMMARY
