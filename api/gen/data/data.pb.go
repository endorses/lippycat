// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: api/proto/data.proto

package data

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// FlowControl signals
type FlowControl int32

const (
	// Continue sending at current rate
	FlowControl_FLOW_CONTINUE FlowControl = 0
	// Slow down transmission
	FlowControl_FLOW_SLOW FlowControl = 1
	// Pause transmission temporarily
	FlowControl_FLOW_PAUSE FlowControl = 2
	// Resume after pause
	FlowControl_FLOW_RESUME FlowControl = 3
)

// Enum value maps for FlowControl.
var (
	FlowControl_name = map[int32]string{
		0: "FLOW_CONTINUE",
		1: "FLOW_SLOW",
		2: "FLOW_PAUSE",
		3: "FLOW_RESUME",
	}
	FlowControl_value = map[string]int32{
		"FLOW_CONTINUE": 0,
		"FLOW_SLOW":     1,
		"FLOW_PAUSE":    2,
		"FLOW_RESUME":   3,
	}
)

func (x FlowControl) Enum() *FlowControl {
	p := new(FlowControl)
	*p = x
	return p
}

func (x FlowControl) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowControl) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_data_proto_enumTypes[0].Descriptor()
}

func (FlowControl) Type() protoreflect.EnumType {
	return &file_api_proto_data_proto_enumTypes[0]
}

func (x FlowControl) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowControl.Descriptor instead.
func (FlowControl) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_data_proto_rawDescGZIP(), []int{0}
}

// PacketBatch contains multiple packets captured by a hunter
type PacketBatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique hunter identifier
	HunterId string `protobuf:"bytes,1,opt,name=hunter_id,json=hunterId,proto3" json:"hunter_id,omitempty"`
	// Batch sequence number (for ordering and loss detection)
	Sequence uint64 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Timestamp when batch was created (Unix nanoseconds)
	TimestampNs int64 `protobuf:"varint,3,opt,name=timestamp_ns,json=timestampNs,proto3" json:"timestamp_ns,omitempty"`
	// Individual packets in this batch
	Packets []*CapturedPacket `protobuf:"bytes,4,rep,name=packets,proto3" json:"packets,omitempty"`
	// Statistics about this hunter's capture
	Stats         *BatchStats `protobuf:"bytes,5,opt,name=stats,proto3" json:"stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PacketBatch) Reset() {
	*x = PacketBatch{}
	mi := &file_api_proto_data_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PacketBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketBatch) ProtoMessage() {}

func (x *PacketBatch) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_data_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketBatch.ProtoReflect.Descriptor instead.
func (*PacketBatch) Descriptor() ([]byte, []int) {
	return file_api_proto_data_proto_rawDescGZIP(), []int{0}
}

func (x *PacketBatch) GetHunterId() string {
	if x != nil {
		return x.HunterId
	}
	return ""
}

func (x *PacketBatch) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PacketBatch) GetTimestampNs() int64 {
	if x != nil {
		return x.TimestampNs
	}
	return 0
}

func (x *PacketBatch) GetPackets() []*CapturedPacket {
	if x != nil {
		return x.Packets
	}
	return nil
}

func (x *PacketBatch) GetStats() *BatchStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// CapturedPacket represents a single captured network packet
type CapturedPacket struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Packet payload (raw network data)
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Capture timestamp (Unix nanoseconds)
	TimestampNs int64 `protobuf:"varint,2,opt,name=timestamp_ns,json=timestampNs,proto3" json:"timestamp_ns,omitempty"`
	// Capture length (actual bytes captured)
	CaptureLength uint32 `protobuf:"varint,3,opt,name=capture_length,json=captureLength,proto3" json:"capture_length,omitempty"`
	// Original length (may be > capture_length if truncated)
	OriginalLength uint32 `protobuf:"varint,4,opt,name=original_length,json=originalLength,proto3" json:"original_length,omitempty"`
	// Interface index where packet was captured
	InterfaceIndex uint32 `protobuf:"varint,5,opt,name=interface_index,json=interfaceIndex,proto3" json:"interface_index,omitempty"`
	// Link type (Ethernet, Raw IP, etc.) - from libpcap
	LinkType uint32 `protobuf:"varint,6,opt,name=link_type,json=linkType,proto3" json:"link_type,omitempty"`
	// Optional: Metadata from local analysis
	Metadata      *PacketMetadata `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CapturedPacket) Reset() {
	*x = CapturedPacket{}
	mi := &file_api_proto_data_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CapturedPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapturedPacket) ProtoMessage() {}

func (x *CapturedPacket) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_data_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapturedPacket.ProtoReflect.Descriptor instead.
func (*CapturedPacket) Descriptor() ([]byte, []int) {
	return file_api_proto_data_proto_rawDescGZIP(), []int{1}
}

func (x *CapturedPacket) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CapturedPacket) GetTimestampNs() int64 {
	if x != nil {
		return x.TimestampNs
	}
	return 0
}

func (x *CapturedPacket) GetCaptureLength() uint32 {
	if x != nil {
		return x.CaptureLength
	}
	return 0
}

func (x *CapturedPacket) GetOriginalLength() uint32 {
	if x != nil {
		return x.OriginalLength
	}
	return 0
}

func (x *CapturedPacket) GetInterfaceIndex() uint32 {
	if x != nil {
		return x.InterfaceIndex
	}
	return 0
}

func (x *CapturedPacket) GetLinkType() uint32 {
	if x != nil {
		return x.LinkType
	}
	return 0
}

func (x *CapturedPacket) GetMetadata() *PacketMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// PacketMetadata contains hunter-side analysis results
type PacketMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Protocol detected (e.g., "SIP", "RTP", "RTCP")
	Protocol string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Source IP address
	SrcIp string `protobuf:"bytes,2,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	// Destination IP address
	DstIp string `protobuf:"bytes,3,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	// Source port
	SrcPort uint32 `protobuf:"varint,4,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty"`
	// Destination port
	DstPort uint32 `protobuf:"varint,5,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`
	// Transport protocol (TCP, UDP, etc.)
	Transport string `protobuf:"bytes,6,opt,name=transport,proto3" json:"transport,omitempty"`
	// SIP-specific metadata (if applicable)
	Sip *SIPMetadata `protobuf:"bytes,7,opt,name=sip,proto3" json:"sip,omitempty"`
	// RTP-specific metadata (if applicable)
	Rtp *RTPMetadata `protobuf:"bytes,8,opt,name=rtp,proto3" json:"rtp,omitempty"`
	// Generic info string for display (e.g., "SSH-2.0-OpenSSH_...", "Echo Reply")
	Info string `protobuf:"bytes,9,opt,name=info,proto3" json:"info,omitempty"`
	// Generic key-value details for protocol-specific data
	Details       map[string]string `protobuf:"bytes,10,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PacketMetadata) Reset() {
	*x = PacketMetadata{}
	mi := &file_api_proto_data_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PacketMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketMetadata) ProtoMessage() {}

func (x *PacketMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_data_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketMetadata.ProtoReflect.Descriptor instead.
func (*PacketMetadata) Descriptor() ([]byte, []int) {
	return file_api_proto_data_proto_rawDescGZIP(), []int{2}
}

func (x *PacketMetadata) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *PacketMetadata) GetSrcIp() string {
	if x != nil {
		return x.SrcIp
	}
	return ""
}

func (x *PacketMetadata) GetDstIp() string {
	if x != nil {
		return x.DstIp
	}
	return ""
}

func (x *PacketMetadata) GetSrcPort() uint32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *PacketMetadata) GetDstPort() uint32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *PacketMetadata) GetTransport() string {
	if x != nil {
		return x.Transport
	}
	return ""
}

func (x *PacketMetadata) GetSip() *SIPMetadata {
	if x != nil {
		return x.Sip
	}
	return nil
}

func (x *PacketMetadata) GetRtp() *RTPMetadata {
	if x != nil {
		return x.Rtp
	}
	return nil
}

func (x *PacketMetadata) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *PacketMetadata) GetDetails() map[string]string {
	if x != nil {
		return x.Details
	}
	return nil
}

// SIPMetadata for SIP packets
type SIPMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// SIP method (INVITE, BYE, REGISTER, etc.)
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// Call-ID
	CallId string `protobuf:"bytes,2,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	// From user
	FromUser string `protobuf:"bytes,3,opt,name=from_user,json=fromUser,proto3" json:"from_user,omitempty"`
	// To user
	ToUser string `protobuf:"bytes,4,opt,name=to_user,json=toUser,proto3" json:"to_user,omitempty"`
	// Response code (for responses)
	ResponseCode  uint32 `protobuf:"varint,5,opt,name=response_code,json=responseCode,proto3" json:"response_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SIPMetadata) Reset() {
	*x = SIPMetadata{}
	mi := &file_api_proto_data_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SIPMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SIPMetadata) ProtoMessage() {}

func (x *SIPMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_data_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SIPMetadata.ProtoReflect.Descriptor instead.
func (*SIPMetadata) Descriptor() ([]byte, []int) {
	return file_api_proto_data_proto_rawDescGZIP(), []int{3}
}

func (x *SIPMetadata) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *SIPMetadata) GetCallId() string {
	if x != nil {
		return x.CallId
	}
	return ""
}

func (x *SIPMetadata) GetFromUser() string {
	if x != nil {
		return x.FromUser
	}
	return ""
}

func (x *SIPMetadata) GetToUser() string {
	if x != nil {
		return x.ToUser
	}
	return ""
}

func (x *SIPMetadata) GetResponseCode() uint32 {
	if x != nil {
		return x.ResponseCode
	}
	return 0
}

// RTPMetadata for RTP packets
type RTPMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// SSRC identifier
	Ssrc uint32 `protobuf:"varint,1,opt,name=ssrc,proto3" json:"ssrc,omitempty"`
	// Payload type
	PayloadType uint32 `protobuf:"varint,2,opt,name=payload_type,json=payloadType,proto3" json:"payload_type,omitempty"`
	// Sequence number
	Sequence uint32 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Timestamp
	Timestamp     uint32 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RTPMetadata) Reset() {
	*x = RTPMetadata{}
	mi := &file_api_proto_data_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RTPMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTPMetadata) ProtoMessage() {}

func (x *RTPMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_data_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTPMetadata.ProtoReflect.Descriptor instead.
func (*RTPMetadata) Descriptor() ([]byte, []int) {
	return file_api_proto_data_proto_rawDescGZIP(), []int{4}
}

func (x *RTPMetadata) GetSsrc() uint32 {
	if x != nil {
		return x.Ssrc
	}
	return 0
}

func (x *RTPMetadata) GetPayloadType() uint32 {
	if x != nil {
		return x.PayloadType
	}
	return 0
}

func (x *RTPMetadata) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *RTPMetadata) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// BatchStats contains statistics about a hunter's capture
type BatchStats struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Total packets captured (before filtering)
	TotalCaptured uint64 `protobuf:"varint,1,opt,name=total_captured,json=totalCaptured,proto3" json:"total_captured,omitempty"`
	// Packets that matched filters
	FilteredMatched uint64 `protobuf:"varint,2,opt,name=filtered_matched,json=filteredMatched,proto3" json:"filtered_matched,omitempty"`
	// Packets dropped (buffer full, etc.)
	Dropped uint64 `protobuf:"varint,3,opt,name=dropped,proto3" json:"dropped,omitempty"`
	// Current buffer usage percentage (0-100)
	BufferUsage   uint32 `protobuf:"varint,4,opt,name=buffer_usage,json=bufferUsage,proto3" json:"buffer_usage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchStats) Reset() {
	*x = BatchStats{}
	mi := &file_api_proto_data_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchStats) ProtoMessage() {}

func (x *BatchStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_data_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchStats.ProtoReflect.Descriptor instead.
func (*BatchStats) Descriptor() ([]byte, []int) {
	return file_api_proto_data_proto_rawDescGZIP(), []int{5}
}

func (x *BatchStats) GetTotalCaptured() uint64 {
	if x != nil {
		return x.TotalCaptured
	}
	return 0
}

func (x *BatchStats) GetFilteredMatched() uint64 {
	if x != nil {
		return x.FilteredMatched
	}
	return 0
}

func (x *BatchStats) GetDropped() uint64 {
	if x != nil {
		return x.Dropped
	}
	return 0
}

func (x *BatchStats) GetBufferUsage() uint32 {
	if x != nil {
		return x.BufferUsage
	}
	return 0
}

// StreamControl messages from processor to hunter
type StreamControl struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Acknowledged sequence number
	AckSequence uint64 `protobuf:"varint,1,opt,name=ack_sequence,json=ackSequence,proto3" json:"ack_sequence,omitempty"`
	// Flow control signal
	FlowControl FlowControl `protobuf:"varint,2,opt,name=flow_control,json=flowControl,proto3,enum=lippycat.data.FlowControl" json:"flow_control,omitempty"`
	// Error message (if any)
	Error         string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamControl) Reset() {
	*x = StreamControl{}
	mi := &file_api_proto_data_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamControl) ProtoMessage() {}

func (x *StreamControl) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_data_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamControl.ProtoReflect.Descriptor instead.
func (*StreamControl) Descriptor() ([]byte, []int) {
	return file_api_proto_data_proto_rawDescGZIP(), []int{6}
}

func (x *StreamControl) GetAckSequence() uint64 {
	if x != nil {
		return x.AckSequence
	}
	return 0
}

func (x *StreamControl) GetFlowControl() FlowControl {
	if x != nil {
		return x.FlowControl
	}
	return FlowControl_FLOW_CONTINUE
}

func (x *StreamControl) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// SubscribeRequest for monitoring clients to subscribe to packet stream
type SubscribeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional: Filter by specific hunter IDs (empty = all hunters)
	HunterIds []string `protobuf:"bytes,1,rep,name=hunter_ids,json=hunterIds,proto3" json:"hunter_ids,omitempty"`
	// Optional: BPF filter to apply on server side
	BpfFilter string `protobuf:"bytes,2,opt,name=bpf_filter,json=bpfFilter,proto3" json:"bpf_filter,omitempty"`
	// Client identifier for logging/tracking
	ClientId      string `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	mi := &file_api_proto_data_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_data_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_data_proto_rawDescGZIP(), []int{7}
}

func (x *SubscribeRequest) GetHunterIds() []string {
	if x != nil {
		return x.HunterIds
	}
	return nil
}

func (x *SubscribeRequest) GetBpfFilter() string {
	if x != nil {
		return x.BpfFilter
	}
	return ""
}

func (x *SubscribeRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

var File_api_proto_data_proto protoreflect.FileDescriptor

const file_api_proto_data_proto_rawDesc = "" +
	"\n" +
	"\x14api/proto/data.proto\x12\rlippycat.data\"\xd3\x01\n" +
	"\vPacketBatch\x12\x1b\n" +
	"\thunter_id\x18\x01 \x01(\tR\bhunterId\x12\x1a\n" +
	"\bsequence\x18\x02 \x01(\x04R\bsequence\x12!\n" +
	"\ftimestamp_ns\x18\x03 \x01(\x03R\vtimestampNs\x127\n" +
	"\apackets\x18\x04 \x03(\v2\x1d.lippycat.data.CapturedPacketR\apackets\x12/\n" +
	"\x05stats\x18\x05 \x01(\v2\x19.lippycat.data.BatchStatsR\x05stats\"\x98\x02\n" +
	"\x0eCapturedPacket\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\x12!\n" +
	"\ftimestamp_ns\x18\x02 \x01(\x03R\vtimestampNs\x12%\n" +
	"\x0ecapture_length\x18\x03 \x01(\rR\rcaptureLength\x12'\n" +
	"\x0foriginal_length\x18\x04 \x01(\rR\x0eoriginalLength\x12'\n" +
	"\x0finterface_index\x18\x05 \x01(\rR\x0einterfaceIndex\x12\x1b\n" +
	"\tlink_type\x18\x06 \x01(\rR\blinkType\x129\n" +
	"\bmetadata\x18\a \x01(\v2\x1d.lippycat.data.PacketMetadataR\bmetadata\"\xa0\x03\n" +
	"\x0ePacketMetadata\x12\x1a\n" +
	"\bprotocol\x18\x01 \x01(\tR\bprotocol\x12\x15\n" +
	"\x06src_ip\x18\x02 \x01(\tR\x05srcIp\x12\x15\n" +
	"\x06dst_ip\x18\x03 \x01(\tR\x05dstIp\x12\x19\n" +
	"\bsrc_port\x18\x04 \x01(\rR\asrcPort\x12\x19\n" +
	"\bdst_port\x18\x05 \x01(\rR\adstPort\x12\x1c\n" +
	"\ttransport\x18\x06 \x01(\tR\ttransport\x12,\n" +
	"\x03sip\x18\a \x01(\v2\x1a.lippycat.data.SIPMetadataR\x03sip\x12,\n" +
	"\x03rtp\x18\b \x01(\v2\x1a.lippycat.data.RTPMetadataR\x03rtp\x12\x12\n" +
	"\x04info\x18\t \x01(\tR\x04info\x12D\n" +
	"\adetails\x18\n" +
	" \x03(\v2*.lippycat.data.PacketMetadata.DetailsEntryR\adetails\x1a:\n" +
	"\fDetailsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x99\x01\n" +
	"\vSIPMetadata\x12\x16\n" +
	"\x06method\x18\x01 \x01(\tR\x06method\x12\x17\n" +
	"\acall_id\x18\x02 \x01(\tR\x06callId\x12\x1b\n" +
	"\tfrom_user\x18\x03 \x01(\tR\bfromUser\x12\x17\n" +
	"\ato_user\x18\x04 \x01(\tR\x06toUser\x12#\n" +
	"\rresponse_code\x18\x05 \x01(\rR\fresponseCode\"~\n" +
	"\vRTPMetadata\x12\x12\n" +
	"\x04ssrc\x18\x01 \x01(\rR\x04ssrc\x12!\n" +
	"\fpayload_type\x18\x02 \x01(\rR\vpayloadType\x12\x1a\n" +
	"\bsequence\x18\x03 \x01(\rR\bsequence\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\rR\ttimestamp\"\x9b\x01\n" +
	"\n" +
	"BatchStats\x12%\n" +
	"\x0etotal_captured\x18\x01 \x01(\x04R\rtotalCaptured\x12)\n" +
	"\x10filtered_matched\x18\x02 \x01(\x04R\x0ffilteredMatched\x12\x18\n" +
	"\adropped\x18\x03 \x01(\x04R\adropped\x12!\n" +
	"\fbuffer_usage\x18\x04 \x01(\rR\vbufferUsage\"\x87\x01\n" +
	"\rStreamControl\x12!\n" +
	"\fack_sequence\x18\x01 \x01(\x04R\vackSequence\x12=\n" +
	"\fflow_control\x18\x02 \x01(\x0e2\x1a.lippycat.data.FlowControlR\vflowControl\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error\"m\n" +
	"\x10SubscribeRequest\x12\x1d\n" +
	"\n" +
	"hunter_ids\x18\x01 \x03(\tR\thunterIds\x12\x1d\n" +
	"\n" +
	"bpf_filter\x18\x02 \x01(\tR\tbpfFilter\x12\x1b\n" +
	"\tclient_id\x18\x03 \x01(\tR\bclientId*P\n" +
	"\vFlowControl\x12\x11\n" +
	"\rFLOW_CONTINUE\x10\x00\x12\r\n" +
	"\tFLOW_SLOW\x10\x01\x12\x0e\n" +
	"\n" +
	"FLOW_PAUSE\x10\x02\x12\x0f\n" +
	"\vFLOW_RESUME\x10\x032\xaf\x01\n" +
	"\vDataService\x12M\n" +
	"\rStreamPackets\x12\x1a.lippycat.data.PacketBatch\x1a\x1c.lippycat.data.StreamControl(\x010\x01\x12Q\n" +
	"\x10SubscribePackets\x12\x1f.lippycat.data.SubscribeRequest\x1a\x1a.lippycat.data.PacketBatch0\x01B+Z)github.com/endorses/lippycat/api/gen/datab\x06proto3"

var (
	file_api_proto_data_proto_rawDescOnce sync.Once
	file_api_proto_data_proto_rawDescData []byte
)

func file_api_proto_data_proto_rawDescGZIP() []byte {
	file_api_proto_data_proto_rawDescOnce.Do(func() {
		file_api_proto_data_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_proto_data_proto_rawDesc), len(file_api_proto_data_proto_rawDesc)))
	})
	return file_api_proto_data_proto_rawDescData
}

var file_api_proto_data_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_proto_data_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_api_proto_data_proto_goTypes = []any{
	(FlowControl)(0),         // 0: lippycat.data.FlowControl
	(*PacketBatch)(nil),      // 1: lippycat.data.PacketBatch
	(*CapturedPacket)(nil),   // 2: lippycat.data.CapturedPacket
	(*PacketMetadata)(nil),   // 3: lippycat.data.PacketMetadata
	(*SIPMetadata)(nil),      // 4: lippycat.data.SIPMetadata
	(*RTPMetadata)(nil),      // 5: lippycat.data.RTPMetadata
	(*BatchStats)(nil),       // 6: lippycat.data.BatchStats
	(*StreamControl)(nil),    // 7: lippycat.data.StreamControl
	(*SubscribeRequest)(nil), // 8: lippycat.data.SubscribeRequest
	nil,                      // 9: lippycat.data.PacketMetadata.DetailsEntry
}
var file_api_proto_data_proto_depIdxs = []int32{
	2, // 0: lippycat.data.PacketBatch.packets:type_name -> lippycat.data.CapturedPacket
	6, // 1: lippycat.data.PacketBatch.stats:type_name -> lippycat.data.BatchStats
	3, // 2: lippycat.data.CapturedPacket.metadata:type_name -> lippycat.data.PacketMetadata
	4, // 3: lippycat.data.PacketMetadata.sip:type_name -> lippycat.data.SIPMetadata
	5, // 4: lippycat.data.PacketMetadata.rtp:type_name -> lippycat.data.RTPMetadata
	9, // 5: lippycat.data.PacketMetadata.details:type_name -> lippycat.data.PacketMetadata.DetailsEntry
	0, // 6: lippycat.data.StreamControl.flow_control:type_name -> lippycat.data.FlowControl
	1, // 7: lippycat.data.DataService.StreamPackets:input_type -> lippycat.data.PacketBatch
	8, // 8: lippycat.data.DataService.SubscribePackets:input_type -> lippycat.data.SubscribeRequest
	7, // 9: lippycat.data.DataService.StreamPackets:output_type -> lippycat.data.StreamControl
	1, // 10: lippycat.data.DataService.SubscribePackets:output_type -> lippycat.data.PacketBatch
	9, // [9:11] is the sub-list for method output_type
	7, // [7:9] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_api_proto_data_proto_init() }
func file_api_proto_data_proto_init() {
	if File_api_proto_data_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_proto_data_proto_rawDesc), len(file_api_proto_data_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_data_proto_goTypes,
		DependencyIndexes: file_api_proto_data_proto_depIdxs,
		EnumInfos:         file_api_proto_data_proto_enumTypes,
		MessageInfos:      file_api_proto_data_proto_msgTypes,
	}.Build()
	File_api_proto_data_proto = out.File
	file_api_proto_data_proto_goTypes = nil
	file_api_proto_data_proto_depIdxs = nil
}
