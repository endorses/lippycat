// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.0
// source: api/proto/management.proto

package management

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// HunterStatus enum
type HunterStatus int32

const (
	// Hunter is capturing and forwarding normally
	HunterStatus_STATUS_HEALTHY HunterStatus = 0
	// Hunter is capturing but buffer is filling up
	HunterStatus_STATUS_WARNING HunterStatus = 1
	// Hunter has errors or stopped capturing
	HunterStatus_STATUS_ERROR HunterStatus = 2
	// Hunter is shutting down
	HunterStatus_STATUS_STOPPING HunterStatus = 3
)

// Enum value maps for HunterStatus.
var (
	HunterStatus_name = map[int32]string{
		0: "STATUS_HEALTHY",
		1: "STATUS_WARNING",
		2: "STATUS_ERROR",
		3: "STATUS_STOPPING",
	}
	HunterStatus_value = map[string]int32{
		"STATUS_HEALTHY":  0,
		"STATUS_WARNING":  1,
		"STATUS_ERROR":    2,
		"STATUS_STOPPING": 3,
	}
)

func (x HunterStatus) Enum() *HunterStatus {
	p := new(HunterStatus)
	*p = x
	return p
}

func (x HunterStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HunterStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_management_proto_enumTypes[0].Descriptor()
}

func (HunterStatus) Type() protoreflect.EnumType {
	return &file_api_proto_management_proto_enumTypes[0]
}

func (x HunterStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HunterStatus.Descriptor instead.
func (HunterStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_management_proto_rawDescGZIP(), []int{0}
}

// ProcessorStatus enum
type ProcessorStatus int32

const (
	// Processor operating normally
	ProcessorStatus_PROCESSOR_HEALTHY ProcessorStatus = 0
	// Processor under load
	ProcessorStatus_PROCESSOR_WARNING ProcessorStatus = 1
	// Processor has errors
	ProcessorStatus_PROCESSOR_ERROR ProcessorStatus = 2
)

// Enum value maps for ProcessorStatus.
var (
	ProcessorStatus_name = map[int32]string{
		0: "PROCESSOR_HEALTHY",
		1: "PROCESSOR_WARNING",
		2: "PROCESSOR_ERROR",
	}
	ProcessorStatus_value = map[string]int32{
		"PROCESSOR_HEALTHY": 0,
		"PROCESSOR_WARNING": 1,
		"PROCESSOR_ERROR":   2,
	}
)

func (x ProcessorStatus) Enum() *ProcessorStatus {
	p := new(ProcessorStatus)
	*p = x
	return p
}

func (x ProcessorStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessorStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_management_proto_enumTypes[1].Descriptor()
}

func (ProcessorStatus) Type() protoreflect.EnumType {
	return &file_api_proto_management_proto_enumTypes[1]
}

func (x ProcessorStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessorStatus.Descriptor instead.
func (ProcessorStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_management_proto_rawDescGZIP(), []int{1}
}

// FilterType enum
type FilterType int32

const (
	// SIP user (From/To headers)
	FilterType_FILTER_SIP_USER FilterType = 0
	// Phone number (with wildcard support)
	FilterType_FILTER_PHONE_NUMBER FilterType = 1
	// IP address or CIDR range
	FilterType_FILTER_IP_ADDRESS FilterType = 2
	// Call-ID
	FilterType_FILTER_CALL_ID FilterType = 3
	// Codec
	FilterType_FILTER_CODEC FilterType = 4
	// Custom BPF filter
	FilterType_FILTER_BPF FilterType = 5
)

// Enum value maps for FilterType.
var (
	FilterType_name = map[int32]string{
		0: "FILTER_SIP_USER",
		1: "FILTER_PHONE_NUMBER",
		2: "FILTER_IP_ADDRESS",
		3: "FILTER_CALL_ID",
		4: "FILTER_CODEC",
		5: "FILTER_BPF",
	}
	FilterType_value = map[string]int32{
		"FILTER_SIP_USER":     0,
		"FILTER_PHONE_NUMBER": 1,
		"FILTER_IP_ADDRESS":   2,
		"FILTER_CALL_ID":      3,
		"FILTER_CODEC":        4,
		"FILTER_BPF":          5,
	}
)

func (x FilterType) Enum() *FilterType {
	p := new(FilterType)
	*p = x
	return p
}

func (x FilterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_management_proto_enumTypes[2].Descriptor()
}

func (FilterType) Type() protoreflect.EnumType {
	return &file_api_proto_management_proto_enumTypes[2]
}

func (x FilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterType.Descriptor instead.
func (FilterType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_management_proto_rawDescGZIP(), []int{2}
}

// FilterUpdateType enum
type FilterUpdateType int32

const (
	// Filter added
	FilterUpdateType_UPDATE_ADD FilterUpdateType = 0
	// Filter modified
	FilterUpdateType_UPDATE_MODIFY FilterUpdateType = 1
	// Filter deleted
	FilterUpdateType_UPDATE_DELETE FilterUpdateType = 2
)

// Enum value maps for FilterUpdateType.
var (
	FilterUpdateType_name = map[int32]string{
		0: "UPDATE_ADD",
		1: "UPDATE_MODIFY",
		2: "UPDATE_DELETE",
	}
	FilterUpdateType_value = map[string]int32{
		"UPDATE_ADD":    0,
		"UPDATE_MODIFY": 1,
		"UPDATE_DELETE": 2,
	}
)

func (x FilterUpdateType) Enum() *FilterUpdateType {
	p := new(FilterUpdateType)
	*p = x
	return p
}

func (x FilterUpdateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterUpdateType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_management_proto_enumTypes[3].Descriptor()
}

func (FilterUpdateType) Type() protoreflect.EnumType {
	return &file_api_proto_management_proto_enumTypes[3]
}

func (x FilterUpdateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterUpdateType.Descriptor instead.
func (FilterUpdateType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_management_proto_rawDescGZIP(), []int{3}
}

// HunterRegistration sent when hunter first connects
type HunterRegistration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique hunter identifier
	HunterId string `protobuf:"bytes,1,opt,name=hunter_id,json=hunterId,proto3" json:"hunter_id,omitempty"`
	// Hunter hostname
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Network interfaces being captured
	Interfaces []string `protobuf:"bytes,3,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	// Hunter version
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// Capture capabilities
	Capabilities  *HunterCapabilities `protobuf:"bytes,5,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HunterRegistration) Reset() {
	*x = HunterRegistration{}
	mi := &file_api_proto_management_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HunterRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HunterRegistration) ProtoMessage() {}

func (x *HunterRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_management_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HunterRegistration.ProtoReflect.Descriptor instead.
func (*HunterRegistration) Descriptor() ([]byte, []int) {
	return file_api_proto_management_proto_rawDescGZIP(), []int{0}
}

func (x *HunterRegistration) GetHunterId() string {
	if x != nil {
		return x.HunterId
	}
	return ""
}

func (x *HunterRegistration) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *HunterRegistration) GetInterfaces() []string {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *HunterRegistration) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *HunterRegistration) GetCapabilities() *HunterCapabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

// HunterCapabilities describes what a hunter can do
type HunterCapabilities struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Supported filter types
	FilterTypes []string `protobuf:"bytes,1,rep,name=filter_types,json=filterTypes,proto3" json:"filter_types,omitempty"`
	// Maximum buffer size (bytes)
	MaxBufferSize uint64 `protobuf:"varint,2,opt,name=max_buffer_size,json=maxBufferSize,proto3" json:"max_buffer_size,omitempty"`
	// Supports GPU acceleration
	GpuAcceleration bool `protobuf:"varint,3,opt,name=gpu_acceleration,json=gpuAcceleration,proto3" json:"gpu_acceleration,omitempty"`
	// Supports AF_XDP
	AfXdp         bool `protobuf:"varint,4,opt,name=af_xdp,json=afXdp,proto3" json:"af_xdp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HunterCapabilities) Reset() {
	*x = HunterCapabilities{}
	mi := &file_api_proto_management_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HunterCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HunterCapabilities) ProtoMessage() {}

func (x *HunterCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_management_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HunterCapabilities.ProtoReflect.Descriptor instead.
func (*HunterCapabilities) Descriptor() ([]byte, []int) {
	return file_api_proto_management_proto_rawDescGZIP(), []int{1}
}

func (x *HunterCapabilities) GetFilterTypes() []string {
	if x != nil {
		return x.FilterTypes
	}
	return nil
}

func (x *HunterCapabilities) GetMaxBufferSize() uint64 {
	if x != nil {
		return x.MaxBufferSize
	}
	return 0
}

func (x *HunterCapabilities) GetGpuAcceleration() bool {
	if x != nil {
		return x.GpuAcceleration
	}
	return false
}

func (x *HunterCapabilities) GetAfXdp() bool {
	if x != nil {
		return x.AfXdp
	}
	return false
}

// RegistrationResponse from processor after registration
type RegistrationResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Registration accepted
	Accepted bool `protobuf:"varint,1,opt,name=accepted,proto3" json:"accepted,omitempty"`
	// Error message if rejected
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Assigned hunter ID (may differ from requested)
	AssignedId string `protobuf:"bytes,3,opt,name=assigned_id,json=assignedId,proto3" json:"assigned_id,omitempty"`
	// Initial filter configuration
	Filters []*Filter `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`
	// Processor configuration
	Config        *ProcessorConfig `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegistrationResponse) Reset() {
	*x = RegistrationResponse{}
	mi := &file_api_proto_management_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationResponse) ProtoMessage() {}

func (x *RegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_management_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationResponse.ProtoReflect.Descriptor instead.
func (*RegistrationResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_management_proto_rawDescGZIP(), []int{2}
}

func (x *RegistrationResponse) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

func (x *RegistrationResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RegistrationResponse) GetAssignedId() string {
	if x != nil {
		return x.AssignedId
	}
	return ""
}

func (x *RegistrationResponse) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *RegistrationResponse) GetConfig() *ProcessorConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// ProcessorConfig sent to hunter
type ProcessorConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Batch size for packet transmission
	BatchSize uint32 `protobuf:"varint,1,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	// Batch timeout (milliseconds)
	BatchTimeoutMs uint32 `protobuf:"varint,2,opt,name=batch_timeout_ms,json=batchTimeoutMs,proto3" json:"batch_timeout_ms,omitempty"`
	// Reconnection interval (seconds)
	ReconnectIntervalSec uint32 `protobuf:"varint,3,opt,name=reconnect_interval_sec,json=reconnectIntervalSec,proto3" json:"reconnect_interval_sec,omitempty"`
	// Maximum reconnection attempts (0 = infinite)
	MaxReconnectAttempts uint32 `protobuf:"varint,4,opt,name=max_reconnect_attempts,json=maxReconnectAttempts,proto3" json:"max_reconnect_attempts,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ProcessorConfig) Reset() {
	*x = ProcessorConfig{}
	mi := &file_api_proto_management_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorConfig) ProtoMessage() {}

func (x *ProcessorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_management_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorConfig.ProtoReflect.Descriptor instead.
func (*ProcessorConfig) Descriptor() ([]byte, []int) {
	return file_api_proto_management_proto_rawDescGZIP(), []int{3}
}

func (x *ProcessorConfig) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *ProcessorConfig) GetBatchTimeoutMs() uint32 {
	if x != nil {
		return x.BatchTimeoutMs
	}
	return 0
}

func (x *ProcessorConfig) GetReconnectIntervalSec() uint32 {
	if x != nil {
		return x.ReconnectIntervalSec
	}
	return 0
}

func (x *ProcessorConfig) GetMaxReconnectAttempts() uint32 {
	if x != nil {
		return x.MaxReconnectAttempts
	}
	return 0
}

// HunterHeartbeat sent periodically by hunter
type HunterHeartbeat struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Hunter identifier
	HunterId string `protobuf:"bytes,1,opt,name=hunter_id,json=hunterId,proto3" json:"hunter_id,omitempty"`
	// Timestamp (Unix nanoseconds)
	TimestampNs int64 `protobuf:"varint,2,opt,name=timestamp_ns,json=timestampNs,proto3" json:"timestamp_ns,omitempty"`
	// Current hunter status
	Status HunterStatus `protobuf:"varint,3,opt,name=status,proto3,enum=lippycat.management.HunterStatus" json:"status,omitempty"`
	// Statistics since last heartbeat
	Stats         *HunterStats `protobuf:"bytes,4,opt,name=stats,proto3" json:"stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HunterHeartbeat) Reset() {
	*x = HunterHeartbeat{}
	mi := &file_api_proto_management_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HunterHeartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HunterHeartbeat) ProtoMessage() {}

func (x *HunterHeartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_management_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HunterHeartbeat.ProtoReflect.Descriptor instead.
func (*HunterHeartbeat) Descriptor() ([]byte, []int) {
	return file_api_proto_management_proto_rawDescGZIP(), []int{4}
}

func (x *HunterHeartbeat) GetHunterId() string {
	if x != nil {
		return x.HunterId
	}
	return ""
}

func (x *HunterHeartbeat) GetTimestampNs() int64 {
	if x != nil {
		return x.TimestampNs
	}
	return 0
}

func (x *HunterHeartbeat) GetStatus() HunterStatus {
	if x != nil {
		return x.Status
	}
	return HunterStatus_STATUS_HEALTHY
}

func (x *HunterHeartbeat) GetStats() *HunterStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// HunterStats contains capture statistics
type HunterStats struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Packets captured
	PacketsCaptured uint64 `protobuf:"varint,1,opt,name=packets_captured,json=packetsCaptured,proto3" json:"packets_captured,omitempty"`
	// Packets matched by filters
	PacketsMatched uint64 `protobuf:"varint,2,opt,name=packets_matched,json=packetsMatched,proto3" json:"packets_matched,omitempty"`
	// Packets forwarded to processor
	PacketsForwarded uint64 `protobuf:"varint,3,opt,name=packets_forwarded,json=packetsForwarded,proto3" json:"packets_forwarded,omitempty"`
	// Packets dropped
	PacketsDropped uint64 `protobuf:"varint,4,opt,name=packets_dropped,json=packetsDropped,proto3" json:"packets_dropped,omitempty"`
	// Current buffer usage (bytes)
	BufferBytes uint64 `protobuf:"varint,5,opt,name=buffer_bytes,json=bufferBytes,proto3" json:"buffer_bytes,omitempty"`
	// Active filters count
	ActiveFilters uint32 `protobuf:"varint,6,opt,name=active_filters,json=activeFilters,proto3" json:"active_filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HunterStats) Reset() {
	*x = HunterStats{}
	mi := &file_api_proto_management_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HunterStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HunterStats) ProtoMessage() {}

func (x *HunterStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_management_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HunterStats.ProtoReflect.Descriptor instead.
func (*HunterStats) Descriptor() ([]byte, []int) {
	return file_api_proto_management_proto_rawDescGZIP(), []int{5}
}

func (x *HunterStats) GetPacketsCaptured() uint64 {
	if x != nil {
		return x.PacketsCaptured
	}
	return 0
}

func (x *HunterStats) GetPacketsMatched() uint64 {
	if x != nil {
		return x.PacketsMatched
	}
	return 0
}

func (x *HunterStats) GetPacketsForwarded() uint64 {
	if x != nil {
		return x.PacketsForwarded
	}
	return 0
}

func (x *HunterStats) GetPacketsDropped() uint64 {
	if x != nil {
		return x.PacketsDropped
	}
	return 0
}

func (x *HunterStats) GetBufferBytes() uint64 {
	if x != nil {
		return x.BufferBytes
	}
	return 0
}

func (x *HunterStats) GetActiveFilters() uint32 {
	if x != nil {
		return x.ActiveFilters
	}
	return 0
}

// ProcessorHeartbeat response from processor
type ProcessorHeartbeat struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Timestamp (Unix nanoseconds)
	TimestampNs int64 `protobuf:"varint,1,opt,name=timestamp_ns,json=timestampNs,proto3" json:"timestamp_ns,omitempty"`
	// Processor status
	Status ProcessorStatus `protobuf:"varint,2,opt,name=status,proto3,enum=lippycat.management.ProcessorStatus" json:"status,omitempty"`
	// Total hunters connected
	HuntersConnected uint32 `protobuf:"varint,3,opt,name=hunters_connected,json=huntersConnected,proto3" json:"hunters_connected,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ProcessorHeartbeat) Reset() {
	*x = ProcessorHeartbeat{}
	mi := &file_api_proto_management_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessorHeartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorHeartbeat) ProtoMessage() {}

func (x *ProcessorHeartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_management_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorHeartbeat.ProtoReflect.Descriptor instead.
func (*ProcessorHeartbeat) Descriptor() ([]byte, []int) {
	return file_api_proto_management_proto_rawDescGZIP(), []int{6}
}

func (x *ProcessorHeartbeat) GetTimestampNs() int64 {
	if x != nil {
		return x.TimestampNs
	}
	return 0
}

func (x *ProcessorHeartbeat) GetStatus() ProcessorStatus {
	if x != nil {
		return x.Status
	}
	return ProcessorStatus_PROCESSOR_HEALTHY
}

func (x *ProcessorHeartbeat) GetHuntersConnected() uint32 {
	if x != nil {
		return x.HuntersConnected
	}
	return 0
}

// FilterRequest to retrieve filters
type FilterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Hunter identifier
	HunterId      string `protobuf:"bytes,1,opt,name=hunter_id,json=hunterId,proto3" json:"hunter_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterRequest) Reset() {
	*x = FilterRequest{}
	mi := &file_api_proto_management_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterRequest) ProtoMessage() {}

func (x *FilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_management_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterRequest.ProtoReflect.Descriptor instead.
func (*FilterRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_management_proto_rawDescGZIP(), []int{7}
}

func (x *FilterRequest) GetHunterId() string {
	if x != nil {
		return x.HunterId
	}
	return ""
}

// FilterResponse contains filters for a hunter
type FilterResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of filters
	Filters       []*Filter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterResponse) Reset() {
	*x = FilterResponse{}
	mi := &file_api_proto_management_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterResponse) ProtoMessage() {}

func (x *FilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_management_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterResponse.ProtoReflect.Descriptor instead.
func (*FilterResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_management_proto_rawDescGZIP(), []int{8}
}

func (x *FilterResponse) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

// Filter definition
type Filter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique filter identifier
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Filter type
	Type FilterType `protobuf:"varint,2,opt,name=type,proto3,enum=lippycat.management.FilterType" json:"type,omitempty"`
	// Filter pattern/value
	Pattern string `protobuf:"bytes,3,opt,name=pattern,proto3" json:"pattern,omitempty"`
	// Target hunter IDs (empty = all hunters)
	TargetHunters []string `protobuf:"bytes,4,rep,name=target_hunters,json=targetHunters,proto3" json:"target_hunters,omitempty"`
	// Filter enabled
	Enabled bool `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Filter description
	Description   string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Filter) Reset() {
	*x = Filter{}
	mi := &file_api_proto_management_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_management_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_api_proto_management_proto_rawDescGZIP(), []int{9}
}

func (x *Filter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Filter) GetType() FilterType {
	if x != nil {
		return x.Type
	}
	return FilterType_FILTER_SIP_USER
}

func (x *Filter) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *Filter) GetTargetHunters() []string {
	if x != nil {
		return x.TargetHunters
	}
	return nil
}

func (x *Filter) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Filter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// FilterUpdate pushed to hunters in real-time
type FilterUpdate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Update type
	UpdateType FilterUpdateType `protobuf:"varint,1,opt,name=update_type,json=updateType,proto3,enum=lippycat.management.FilterUpdateType" json:"update_type,omitempty"`
	// Filter being added/modified/deleted
	Filter        *Filter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterUpdate) Reset() {
	*x = FilterUpdate{}
	mi := &file_api_proto_management_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterUpdate) ProtoMessage() {}

func (x *FilterUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_management_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterUpdate.ProtoReflect.Descriptor instead.
func (*FilterUpdate) Descriptor() ([]byte, []int) {
	return file_api_proto_management_proto_rawDescGZIP(), []int{10}
}

func (x *FilterUpdate) GetUpdateType() FilterUpdateType {
	if x != nil {
		return x.UpdateType
	}
	return FilterUpdateType_UPDATE_ADD
}

func (x *FilterUpdate) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

// FilterUpdateResult response after filter update
type FilterUpdateResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Success
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Error message if failed
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Number of hunters that received the update
	HuntersUpdated uint32 `protobuf:"varint,3,opt,name=hunters_updated,json=huntersUpdated,proto3" json:"hunters_updated,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FilterUpdateResult) Reset() {
	*x = FilterUpdateResult{}
	mi := &file_api_proto_management_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterUpdateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterUpdateResult) ProtoMessage() {}

func (x *FilterUpdateResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_management_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterUpdateResult.ProtoReflect.Descriptor instead.
func (*FilterUpdateResult) Descriptor() ([]byte, []int) {
	return file_api_proto_management_proto_rawDescGZIP(), []int{11}
}

func (x *FilterUpdateResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FilterUpdateResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *FilterUpdateResult) GetHuntersUpdated() uint32 {
	if x != nil {
		return x.HuntersUpdated
	}
	return 0
}

// FilterDeleteRequest to delete a filter
type FilterDeleteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filter ID to delete
	FilterId      string `protobuf:"bytes,1,opt,name=filter_id,json=filterId,proto3" json:"filter_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterDeleteRequest) Reset() {
	*x = FilterDeleteRequest{}
	mi := &file_api_proto_management_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterDeleteRequest) ProtoMessage() {}

func (x *FilterDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_management_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterDeleteRequest.ProtoReflect.Descriptor instead.
func (*FilterDeleteRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_management_proto_rawDescGZIP(), []int{12}
}

func (x *FilterDeleteRequest) GetFilterId() string {
	if x != nil {
		return x.FilterId
	}
	return ""
}

// StatusRequest to get hunter status (for TUI)
type StatusRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional: filter by hunter ID
	HunterId      string `protobuf:"bytes,1,opt,name=hunter_id,json=hunterId,proto3" json:"hunter_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	mi := &file_api_proto_management_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_management_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_management_proto_rawDescGZIP(), []int{13}
}

func (x *StatusRequest) GetHunterId() string {
	if x != nil {
		return x.HunterId
	}
	return ""
}

// StatusResponse with hunter statuses
type StatusResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Connected hunters
	Hunters []*ConnectedHunter `protobuf:"bytes,1,rep,name=hunters,proto3" json:"hunters,omitempty"`
	// Processor statistics
	ProcessorStats *ProcessorStats `protobuf:"bytes,2,opt,name=processor_stats,json=processorStats,proto3" json:"processor_stats,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	mi := &file_api_proto_management_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_management_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_management_proto_rawDescGZIP(), []int{14}
}

func (x *StatusResponse) GetHunters() []*ConnectedHunter {
	if x != nil {
		return x.Hunters
	}
	return nil
}

func (x *StatusResponse) GetProcessorStats() *ProcessorStats {
	if x != nil {
		return x.ProcessorStats
	}
	return nil
}

// ConnectedHunter status information
type ConnectedHunter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Hunter identifier
	HunterId string `protobuf:"bytes,1,opt,name=hunter_id,json=hunterId,proto3" json:"hunter_id,omitempty"`
	// Hostname
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Remote address
	RemoteAddr string `protobuf:"bytes,3,opt,name=remote_addr,json=remoteAddr,proto3" json:"remote_addr,omitempty"`
	// Connection status
	Status HunterStatus `protobuf:"varint,4,opt,name=status,proto3,enum=lippycat.management.HunterStatus" json:"status,omitempty"`
	// Connected duration (seconds)
	ConnectedDurationSec uint64 `protobuf:"varint,5,opt,name=connected_duration_sec,json=connectedDurationSec,proto3" json:"connected_duration_sec,omitempty"`
	// Last heartbeat timestamp
	LastHeartbeatNs int64 `protobuf:"varint,6,opt,name=last_heartbeat_ns,json=lastHeartbeatNs,proto3" json:"last_heartbeat_ns,omitempty"`
	// Current statistics
	Stats *HunterStats `protobuf:"bytes,7,opt,name=stats,proto3" json:"stats,omitempty"`
	// Active filters
	Filters []*Filter `protobuf:"bytes,8,rep,name=filters,proto3" json:"filters,omitempty"`
	// Network interfaces being captured
	Interfaces    []string `protobuf:"bytes,9,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectedHunter) Reset() {
	*x = ConnectedHunter{}
	mi := &file_api_proto_management_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectedHunter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectedHunter) ProtoMessage() {}

func (x *ConnectedHunter) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_management_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectedHunter.ProtoReflect.Descriptor instead.
func (*ConnectedHunter) Descriptor() ([]byte, []int) {
	return file_api_proto_management_proto_rawDescGZIP(), []int{15}
}

func (x *ConnectedHunter) GetHunterId() string {
	if x != nil {
		return x.HunterId
	}
	return ""
}

func (x *ConnectedHunter) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *ConnectedHunter) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *ConnectedHunter) GetStatus() HunterStatus {
	if x != nil {
		return x.Status
	}
	return HunterStatus_STATUS_HEALTHY
}

func (x *ConnectedHunter) GetConnectedDurationSec() uint64 {
	if x != nil {
		return x.ConnectedDurationSec
	}
	return 0
}

func (x *ConnectedHunter) GetLastHeartbeatNs() int64 {
	if x != nil {
		return x.LastHeartbeatNs
	}
	return 0
}

func (x *ConnectedHunter) GetStats() *HunterStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *ConnectedHunter) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ConnectedHunter) GetInterfaces() []string {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

// ProcessorStats for processor node
type ProcessorStats struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Total hunters connected
	TotalHunters uint32 `protobuf:"varint,1,opt,name=total_hunters,json=totalHunters,proto3" json:"total_hunters,omitempty"`
	// Healthy hunters
	HealthyHunters uint32 `protobuf:"varint,2,opt,name=healthy_hunters,json=healthyHunters,proto3" json:"healthy_hunters,omitempty"`
	// Warning hunters
	WarningHunters uint32 `protobuf:"varint,3,opt,name=warning_hunters,json=warningHunters,proto3" json:"warning_hunters,omitempty"`
	// Error hunters
	ErrorHunters uint32 `protobuf:"varint,4,opt,name=error_hunters,json=errorHunters,proto3" json:"error_hunters,omitempty"`
	// Total packets received from all hunters
	TotalPacketsReceived uint64 `protobuf:"varint,5,opt,name=total_packets_received,json=totalPacketsReceived,proto3" json:"total_packets_received,omitempty"`
	// Total packets forwarded upstream
	TotalPacketsForwarded uint64 `protobuf:"varint,6,opt,name=total_packets_forwarded,json=totalPacketsForwarded,proto3" json:"total_packets_forwarded,omitempty"`
	// Total filters active
	TotalFilters  uint32 `protobuf:"varint,7,opt,name=total_filters,json=totalFilters,proto3" json:"total_filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessorStats) Reset() {
	*x = ProcessorStats{}
	mi := &file_api_proto_management_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessorStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorStats) ProtoMessage() {}

func (x *ProcessorStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_management_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorStats.ProtoReflect.Descriptor instead.
func (*ProcessorStats) Descriptor() ([]byte, []int) {
	return file_api_proto_management_proto_rawDescGZIP(), []int{16}
}

func (x *ProcessorStats) GetTotalHunters() uint32 {
	if x != nil {
		return x.TotalHunters
	}
	return 0
}

func (x *ProcessorStats) GetHealthyHunters() uint32 {
	if x != nil {
		return x.HealthyHunters
	}
	return 0
}

func (x *ProcessorStats) GetWarningHunters() uint32 {
	if x != nil {
		return x.WarningHunters
	}
	return 0
}

func (x *ProcessorStats) GetErrorHunters() uint32 {
	if x != nil {
		return x.ErrorHunters
	}
	return 0
}

func (x *ProcessorStats) GetTotalPacketsReceived() uint64 {
	if x != nil {
		return x.TotalPacketsReceived
	}
	return 0
}

func (x *ProcessorStats) GetTotalPacketsForwarded() uint64 {
	if x != nil {
		return x.TotalPacketsForwarded
	}
	return 0
}

func (x *ProcessorStats) GetTotalFilters() uint32 {
	if x != nil {
		return x.TotalFilters
	}
	return 0
}

var File_api_proto_management_proto protoreflect.FileDescriptor

const file_api_proto_management_proto_rawDesc = "" +
	"\n" +
	"\x1aapi/proto/management.proto\x12\x13lippycat.management\"\xd4\x01\n" +
	"\x12HunterRegistration\x12\x1b\n" +
	"\thunter_id\x18\x01 \x01(\tR\bhunterId\x12\x1a\n" +
	"\bhostname\x18\x02 \x01(\tR\bhostname\x12\x1e\n" +
	"\n" +
	"interfaces\x18\x03 \x03(\tR\n" +
	"interfaces\x12\x18\n" +
	"\aversion\x18\x04 \x01(\tR\aversion\x12K\n" +
	"\fcapabilities\x18\x05 \x01(\v2'.lippycat.management.HunterCapabilitiesR\fcapabilities\"\xa1\x01\n" +
	"\x12HunterCapabilities\x12!\n" +
	"\ffilter_types\x18\x01 \x03(\tR\vfilterTypes\x12&\n" +
	"\x0fmax_buffer_size\x18\x02 \x01(\x04R\rmaxBufferSize\x12)\n" +
	"\x10gpu_acceleration\x18\x03 \x01(\bR\x0fgpuAcceleration\x12\x15\n" +
	"\x06af_xdp\x18\x04 \x01(\bR\x05afXdp\"\xde\x01\n" +
	"\x14RegistrationResponse\x12\x1a\n" +
	"\baccepted\x18\x01 \x01(\bR\baccepted\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x12\x1f\n" +
	"\vassigned_id\x18\x03 \x01(\tR\n" +
	"assignedId\x125\n" +
	"\afilters\x18\x04 \x03(\v2\x1b.lippycat.management.FilterR\afilters\x12<\n" +
	"\x06config\x18\x05 \x01(\v2$.lippycat.management.ProcessorConfigR\x06config\"\xc6\x01\n" +
	"\x0fProcessorConfig\x12\x1d\n" +
	"\n" +
	"batch_size\x18\x01 \x01(\rR\tbatchSize\x12(\n" +
	"\x10batch_timeout_ms\x18\x02 \x01(\rR\x0ebatchTimeoutMs\x124\n" +
	"\x16reconnect_interval_sec\x18\x03 \x01(\rR\x14reconnectIntervalSec\x124\n" +
	"\x16max_reconnect_attempts\x18\x04 \x01(\rR\x14maxReconnectAttempts\"\xc4\x01\n" +
	"\x0fHunterHeartbeat\x12\x1b\n" +
	"\thunter_id\x18\x01 \x01(\tR\bhunterId\x12!\n" +
	"\ftimestamp_ns\x18\x02 \x01(\x03R\vtimestampNs\x129\n" +
	"\x06status\x18\x03 \x01(\x0e2!.lippycat.management.HunterStatusR\x06status\x126\n" +
	"\x05stats\x18\x04 \x01(\v2 .lippycat.management.HunterStatsR\x05stats\"\x81\x02\n" +
	"\vHunterStats\x12)\n" +
	"\x10packets_captured\x18\x01 \x01(\x04R\x0fpacketsCaptured\x12'\n" +
	"\x0fpackets_matched\x18\x02 \x01(\x04R\x0epacketsMatched\x12+\n" +
	"\x11packets_forwarded\x18\x03 \x01(\x04R\x10packetsForwarded\x12'\n" +
	"\x0fpackets_dropped\x18\x04 \x01(\x04R\x0epacketsDropped\x12!\n" +
	"\fbuffer_bytes\x18\x05 \x01(\x04R\vbufferBytes\x12%\n" +
	"\x0eactive_filters\x18\x06 \x01(\rR\ractiveFilters\"\xa2\x01\n" +
	"\x12ProcessorHeartbeat\x12!\n" +
	"\ftimestamp_ns\x18\x01 \x01(\x03R\vtimestampNs\x12<\n" +
	"\x06status\x18\x02 \x01(\x0e2$.lippycat.management.ProcessorStatusR\x06status\x12+\n" +
	"\x11hunters_connected\x18\x03 \x01(\rR\x10huntersConnected\",\n" +
	"\rFilterRequest\x12\x1b\n" +
	"\thunter_id\x18\x01 \x01(\tR\bhunterId\"G\n" +
	"\x0eFilterResponse\x125\n" +
	"\afilters\x18\x01 \x03(\v2\x1b.lippycat.management.FilterR\afilters\"\xca\x01\n" +
	"\x06Filter\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x123\n" +
	"\x04type\x18\x02 \x01(\x0e2\x1f.lippycat.management.FilterTypeR\x04type\x12\x18\n" +
	"\apattern\x18\x03 \x01(\tR\apattern\x12%\n" +
	"\x0etarget_hunters\x18\x04 \x03(\tR\rtargetHunters\x12\x18\n" +
	"\aenabled\x18\x05 \x01(\bR\aenabled\x12 \n" +
	"\vdescription\x18\x06 \x01(\tR\vdescription\"\x8b\x01\n" +
	"\fFilterUpdate\x12F\n" +
	"\vupdate_type\x18\x01 \x01(\x0e2%.lippycat.management.FilterUpdateTypeR\n" +
	"updateType\x123\n" +
	"\x06filter\x18\x02 \x01(\v2\x1b.lippycat.management.FilterR\x06filter\"m\n" +
	"\x12FilterUpdateResult\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x12'\n" +
	"\x0fhunters_updated\x18\x03 \x01(\rR\x0ehuntersUpdated\"2\n" +
	"\x13FilterDeleteRequest\x12\x1b\n" +
	"\tfilter_id\x18\x01 \x01(\tR\bfilterId\",\n" +
	"\rStatusRequest\x12\x1b\n" +
	"\thunter_id\x18\x01 \x01(\tR\bhunterId\"\x9e\x01\n" +
	"\x0eStatusResponse\x12>\n" +
	"\ahunters\x18\x01 \x03(\v2$.lippycat.management.ConnectedHunterR\ahunters\x12L\n" +
	"\x0fprocessor_stats\x18\x02 \x01(\v2#.lippycat.management.ProcessorStatsR\x0eprocessorStats\"\x97\x03\n" +
	"\x0fConnectedHunter\x12\x1b\n" +
	"\thunter_id\x18\x01 \x01(\tR\bhunterId\x12\x1a\n" +
	"\bhostname\x18\x02 \x01(\tR\bhostname\x12\x1f\n" +
	"\vremote_addr\x18\x03 \x01(\tR\n" +
	"remoteAddr\x129\n" +
	"\x06status\x18\x04 \x01(\x0e2!.lippycat.management.HunterStatusR\x06status\x124\n" +
	"\x16connected_duration_sec\x18\x05 \x01(\x04R\x14connectedDurationSec\x12*\n" +
	"\x11last_heartbeat_ns\x18\x06 \x01(\x03R\x0flastHeartbeatNs\x126\n" +
	"\x05stats\x18\a \x01(\v2 .lippycat.management.HunterStatsR\x05stats\x125\n" +
	"\afilters\x18\b \x03(\v2\x1b.lippycat.management.FilterR\afilters\x12\x1e\n" +
	"\n" +
	"interfaces\x18\t \x03(\tR\n" +
	"interfaces\"\xbf\x02\n" +
	"\x0eProcessorStats\x12#\n" +
	"\rtotal_hunters\x18\x01 \x01(\rR\ftotalHunters\x12'\n" +
	"\x0fhealthy_hunters\x18\x02 \x01(\rR\x0ehealthyHunters\x12'\n" +
	"\x0fwarning_hunters\x18\x03 \x01(\rR\x0ewarningHunters\x12#\n" +
	"\rerror_hunters\x18\x04 \x01(\rR\ferrorHunters\x124\n" +
	"\x16total_packets_received\x18\x05 \x01(\x04R\x14totalPacketsReceived\x126\n" +
	"\x17total_packets_forwarded\x18\x06 \x01(\x04R\x15totalPacketsForwarded\x12#\n" +
	"\rtotal_filters\x18\a \x01(\rR\ftotalFilters*]\n" +
	"\fHunterStatus\x12\x12\n" +
	"\x0eSTATUS_HEALTHY\x10\x00\x12\x12\n" +
	"\x0eSTATUS_WARNING\x10\x01\x12\x10\n" +
	"\fSTATUS_ERROR\x10\x02\x12\x13\n" +
	"\x0fSTATUS_STOPPING\x10\x03*T\n" +
	"\x0fProcessorStatus\x12\x15\n" +
	"\x11PROCESSOR_HEALTHY\x10\x00\x12\x15\n" +
	"\x11PROCESSOR_WARNING\x10\x01\x12\x13\n" +
	"\x0fPROCESSOR_ERROR\x10\x02*\x87\x01\n" +
	"\n" +
	"FilterType\x12\x13\n" +
	"\x0fFILTER_SIP_USER\x10\x00\x12\x17\n" +
	"\x13FILTER_PHONE_NUMBER\x10\x01\x12\x15\n" +
	"\x11FILTER_IP_ADDRESS\x10\x02\x12\x12\n" +
	"\x0eFILTER_CALL_ID\x10\x03\x12\x10\n" +
	"\fFILTER_CODEC\x10\x04\x12\x0e\n" +
	"\n" +
	"FILTER_BPF\x10\x05*H\n" +
	"\x10FilterUpdateType\x12\x0e\n" +
	"\n" +
	"UPDATE_ADD\x10\x00\x12\x11\n" +
	"\rUPDATE_MODIFY\x10\x01\x12\x11\n" +
	"\rUPDATE_DELETE\x10\x022\xa2\x05\n" +
	"\x11ManagementService\x12d\n" +
	"\x0eRegisterHunter\x12'.lippycat.management.HunterRegistration\x1a).lippycat.management.RegistrationResponse\x12^\n" +
	"\tHeartbeat\x12$.lippycat.management.HunterHeartbeat\x1a'.lippycat.management.ProcessorHeartbeat(\x010\x01\x12U\n" +
	"\n" +
	"GetFilters\x12\".lippycat.management.FilterRequest\x1a#.lippycat.management.FilterResponse\x12[\n" +
	"\x10SubscribeFilters\x12\".lippycat.management.FilterRequest\x1a!.lippycat.management.FilterUpdate0\x01\x12Z\n" +
	"\x0fGetHunterStatus\x12\".lippycat.management.StatusRequest\x1a#.lippycat.management.StatusResponse\x12T\n" +
	"\fUpdateFilter\x12\x1b.lippycat.management.Filter\x1a'.lippycat.management.FilterUpdateResult\x12a\n" +
	"\fDeleteFilter\x12(.lippycat.management.FilterDeleteRequest\x1a'.lippycat.management.FilterUpdateResultB1Z/github.com/endorses/lippycat/api/gen/managementb\x06proto3"

var (
	file_api_proto_management_proto_rawDescOnce sync.Once
	file_api_proto_management_proto_rawDescData []byte
)

func file_api_proto_management_proto_rawDescGZIP() []byte {
	file_api_proto_management_proto_rawDescOnce.Do(func() {
		file_api_proto_management_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_proto_management_proto_rawDesc), len(file_api_proto_management_proto_rawDesc)))
	})
	return file_api_proto_management_proto_rawDescData
}

var file_api_proto_management_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_api_proto_management_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_api_proto_management_proto_goTypes = []any{
	(HunterStatus)(0),            // 0: lippycat.management.HunterStatus
	(ProcessorStatus)(0),         // 1: lippycat.management.ProcessorStatus
	(FilterType)(0),              // 2: lippycat.management.FilterType
	(FilterUpdateType)(0),        // 3: lippycat.management.FilterUpdateType
	(*HunterRegistration)(nil),   // 4: lippycat.management.HunterRegistration
	(*HunterCapabilities)(nil),   // 5: lippycat.management.HunterCapabilities
	(*RegistrationResponse)(nil), // 6: lippycat.management.RegistrationResponse
	(*ProcessorConfig)(nil),      // 7: lippycat.management.ProcessorConfig
	(*HunterHeartbeat)(nil),      // 8: lippycat.management.HunterHeartbeat
	(*HunterStats)(nil),          // 9: lippycat.management.HunterStats
	(*ProcessorHeartbeat)(nil),   // 10: lippycat.management.ProcessorHeartbeat
	(*FilterRequest)(nil),        // 11: lippycat.management.FilterRequest
	(*FilterResponse)(nil),       // 12: lippycat.management.FilterResponse
	(*Filter)(nil),               // 13: lippycat.management.Filter
	(*FilterUpdate)(nil),         // 14: lippycat.management.FilterUpdate
	(*FilterUpdateResult)(nil),   // 15: lippycat.management.FilterUpdateResult
	(*FilterDeleteRequest)(nil),  // 16: lippycat.management.FilterDeleteRequest
	(*StatusRequest)(nil),        // 17: lippycat.management.StatusRequest
	(*StatusResponse)(nil),       // 18: lippycat.management.StatusResponse
	(*ConnectedHunter)(nil),      // 19: lippycat.management.ConnectedHunter
	(*ProcessorStats)(nil),       // 20: lippycat.management.ProcessorStats
}
var file_api_proto_management_proto_depIdxs = []int32{
	5,  // 0: lippycat.management.HunterRegistration.capabilities:type_name -> lippycat.management.HunterCapabilities
	13, // 1: lippycat.management.RegistrationResponse.filters:type_name -> lippycat.management.Filter
	7,  // 2: lippycat.management.RegistrationResponse.config:type_name -> lippycat.management.ProcessorConfig
	0,  // 3: lippycat.management.HunterHeartbeat.status:type_name -> lippycat.management.HunterStatus
	9,  // 4: lippycat.management.HunterHeartbeat.stats:type_name -> lippycat.management.HunterStats
	1,  // 5: lippycat.management.ProcessorHeartbeat.status:type_name -> lippycat.management.ProcessorStatus
	13, // 6: lippycat.management.FilterResponse.filters:type_name -> lippycat.management.Filter
	2,  // 7: lippycat.management.Filter.type:type_name -> lippycat.management.FilterType
	3,  // 8: lippycat.management.FilterUpdate.update_type:type_name -> lippycat.management.FilterUpdateType
	13, // 9: lippycat.management.FilterUpdate.filter:type_name -> lippycat.management.Filter
	19, // 10: lippycat.management.StatusResponse.hunters:type_name -> lippycat.management.ConnectedHunter
	20, // 11: lippycat.management.StatusResponse.processor_stats:type_name -> lippycat.management.ProcessorStats
	0,  // 12: lippycat.management.ConnectedHunter.status:type_name -> lippycat.management.HunterStatus
	9,  // 13: lippycat.management.ConnectedHunter.stats:type_name -> lippycat.management.HunterStats
	13, // 14: lippycat.management.ConnectedHunter.filters:type_name -> lippycat.management.Filter
	4,  // 15: lippycat.management.ManagementService.RegisterHunter:input_type -> lippycat.management.HunterRegistration
	8,  // 16: lippycat.management.ManagementService.Heartbeat:input_type -> lippycat.management.HunterHeartbeat
	11, // 17: lippycat.management.ManagementService.GetFilters:input_type -> lippycat.management.FilterRequest
	11, // 18: lippycat.management.ManagementService.SubscribeFilters:input_type -> lippycat.management.FilterRequest
	17, // 19: lippycat.management.ManagementService.GetHunterStatus:input_type -> lippycat.management.StatusRequest
	13, // 20: lippycat.management.ManagementService.UpdateFilter:input_type -> lippycat.management.Filter
	16, // 21: lippycat.management.ManagementService.DeleteFilter:input_type -> lippycat.management.FilterDeleteRequest
	6,  // 22: lippycat.management.ManagementService.RegisterHunter:output_type -> lippycat.management.RegistrationResponse
	10, // 23: lippycat.management.ManagementService.Heartbeat:output_type -> lippycat.management.ProcessorHeartbeat
	12, // 24: lippycat.management.ManagementService.GetFilters:output_type -> lippycat.management.FilterResponse
	14, // 25: lippycat.management.ManagementService.SubscribeFilters:output_type -> lippycat.management.FilterUpdate
	18, // 26: lippycat.management.ManagementService.GetHunterStatus:output_type -> lippycat.management.StatusResponse
	15, // 27: lippycat.management.ManagementService.UpdateFilter:output_type -> lippycat.management.FilterUpdateResult
	15, // 28: lippycat.management.ManagementService.DeleteFilter:output_type -> lippycat.management.FilterUpdateResult
	22, // [22:29] is the sub-list for method output_type
	15, // [15:22] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_api_proto_management_proto_init() }
func file_api_proto_management_proto_init() {
	if File_api_proto_management_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_proto_management_proto_rawDesc), len(file_api_proto_management_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_management_proto_goTypes,
		DependencyIndexes: file_api_proto_management_proto_depIdxs,
		EnumInfos:         file_api_proto_management_proto_enumTypes,
		MessageInfos:      file_api_proto_management_proto_msgTypes,
	}.Build()
	File_api_proto_management_proto = out.File
	file_api_proto_management_proto_goTypes = nil
	file_api_proto_management_proto_depIdxs = nil
}
